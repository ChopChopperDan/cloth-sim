//This file is automatically generated. DO NOT EDIT!

#ifndef ROBOTRACONTEUR_USE_STDAFX
#include "edu__rpi__cats__utilities__clothsim_stubskel.h"
#include <boost/algorithm/string.hpp>
#include <boost/lexical_cast.hpp>
#else
#include "stdafx.h"
#endif
namespace edu
{
namespace rpi
{
namespace cats
{
namespace utilities
{
namespace clothsim
{
std::string edu__rpi__cats__utilities__clothsimFactory::GetServiceName()
{
return "edu.rpi.cats.utilities.clothsim";
}
std::string edu__rpi__cats__utilities__clothsimFactory::DefString()
{
std::string out(
"service edu.rpi.cats.utilities.clothsim\n"
"\n"
"option version 0.5\n"
"\n"
"struct Velocity\n"
"field double vx\n"
"field double vy\n"
"field double vz\n"
"end struct\n"
"\n"
"struct ClothState\n"
"field double t\n"
"field uint16 numX\n"
"field uint16 numY\n"
"field uint32 n_points\n"
"field double[] x\n"
"field double[] y\n"
"field double[] z\n"
"field double[] fx\n"
"field double[] fy\n"
"field double[] fz\n"
"\n"
"end struct\n"
"\n"
"object ClothSimulator\n"
"\n"
"function ClothState getClothState()\n"
"function void setGraspVelocities(Velocity v00, Velocity v10, Velocity v01, Velocity v11)\n"
"\n"
"end object\n"
);
return out;
}
RR_SHARED_PTR<RobotRaconteur::StructureStub> edu__rpi__cats__utilities__clothsimFactory::FindStructureStub(std::string s)
{
boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(s);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (objecttype=="Velocity") return RobotRaconteur::rr_cast<RobotRaconteur::StructureStub>(RR_MAKE_SHARED<Velocity_stub>(GetNode()));
if (objecttype=="ClothState") return RobotRaconteur::rr_cast<RobotRaconteur::StructureStub>(RR_MAKE_SHARED<ClothState_stub>(GetNode()));
throw RobotRaconteur::ServiceException("Invalid structure stub type.");
}
RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> edu__rpi__cats__utilities__clothsimFactory::PackStructure(RR_SHARED_PTR<RobotRaconteur::RRStructure> structin)
{
std::string type=structin->RRType();boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(type);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (servicetype != "edu.rpi.cats.utilities.clothsim") return GetNode()->PackStructure(structin);
RR_SHARED_PTR<RobotRaconteur::StructureStub> stub=FindStructureStub(type);
return stub->PackStructure(structin);
throw RobotRaconteur::ServiceException("Invalid structure stub type.");
}
RR_SHARED_PTR<RobotRaconteur::RRObject> edu__rpi__cats__utilities__clothsimFactory::UnpackStructure(RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> mstructin)
{
std::string type=mstructin->GetTypeString();boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(type);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (servicetype != "edu.rpi.cats.utilities.clothsim") return GetNode()->UnpackStructure(mstructin);
RR_SHARED_PTR<RobotRaconteur::StructureStub> stub=FindStructureStub(type);
return stub->UnpackStructure(mstructin);
throw RobotRaconteur::ServiceException("Invalid structure stub type.");
}
RR_SHARED_PTR<RobotRaconteur::ServiceStub> edu__rpi__cats__utilities__clothsimFactory::CreateStub(std::string type, std::string path, RR_SHARED_PTR<RobotRaconteur::ClientContext> context)
{
boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(type);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (servicetype != "edu.rpi.cats.utilities.clothsim") return GetNode()->GetServiceType(servicetype)->CreateStub(type,path,context);
if (objecttype=="ClothSimulator") { RR_SHARED_PTR<ClothSimulator_stub> o=(RR_MAKE_SHARED<ClothSimulator_stub>(path,context)); o->RRInitStub(); return o; }
throw RobotRaconteur::ServiceException("Invalid structure stub type.");
}
RR_SHARED_PTR<RobotRaconteur::ServiceSkel> edu__rpi__cats__utilities__clothsimFactory::CreateSkel(std::string type, std::string path, RR_SHARED_PTR<RobotRaconteur::RRObject> obj, RR_SHARED_PTR<RobotRaconteur::ServerContext> context)
{
boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(type);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (servicetype != "edu.rpi.cats.utilities.clothsim") return GetNode()->GetServiceType(servicetype)->CreateSkel(type,path,obj,context);
if (objecttype=="ClothSimulator") {RR_SHARED_PTR<ClothSimulator_skel> o=RR_MAKE_SHARED<ClothSimulator_skel>(); o->Init(path,obj,context); return o; }
throw RobotRaconteur::ServiceException("Invalid structure skel type.");
return RR_SHARED_PTR<RobotRaconteur::ServiceSkel>();
}
void edu__rpi__cats__utilities__clothsimFactory::DownCastAndThrowException(RobotRaconteur::RobotRaconteurException& rr_exp)
{
std::string rr_type=rr_exp.Error;
if (rr_type.find('.')==std::string::npos)
{
	return;
}
boost::tuple<std::string,std::string> rr_res=RobotRaconteur::SplitQualifiedName(rr_type);
if (rr_res.get<0>() != "edu.rpi.cats.utilities.clothsim") GetNode()->DownCastAndThrowException(rr_exp);
return;
}
RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> edu__rpi__cats__utilities__clothsimFactory::DownCastException(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> rr_exp){
if (!rr_exp) return rr_exp;
std::string rr_type=rr_exp->Error;
if (rr_type.find('.')==std::string::npos)
{
	return rr_exp;
}
boost::tuple<std::string,std::string> rr_res=RobotRaconteur::SplitQualifiedName(rr_type);
if (rr_res.get<0>() != "edu.rpi.cats.utilities.clothsim") return GetNode()->DownCastException(rr_exp);
return rr_exp;
}

RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> Velocity_stub::PackStructure(RR_SHARED_PTR<RobotRaconteur::RRObject> s)
{
RR_SHARED_PTR<Velocity > s2=RobotRaconteur::rr_cast<Velocity >(s);
std::vector<RR_SHARED_PTR<RobotRaconteur::MessageElement> > vret;
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("vx",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<double >(s2->vx))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("vy",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<double >(s2->vy))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("vz",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<double >(s2->vz))));
return RR_MAKE_SHARED<RobotRaconteur::MessageElementStructure>("edu.rpi.cats.utilities.clothsim.Velocity",vret);
}
RR_SHARED_PTR<RobotRaconteur::RRStructure> Velocity_stub::UnpackStructure(RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> m)
{
RR_SHARED_PTR<Velocity > ret=RR_MAKE_SHARED<Velocity >();
ret->vx=RobotRaconteur::RRArrayToScalar<double >(RobotRaconteur::MessageElement::FindElement(m->Elements,"vx")->CastData<RobotRaconteur::RRArray<double > >());
ret->vy=RobotRaconteur::RRArrayToScalar<double >(RobotRaconteur::MessageElement::FindElement(m->Elements,"vy")->CastData<RobotRaconteur::RRArray<double > >());
ret->vz=RobotRaconteur::RRArrayToScalar<double >(RobotRaconteur::MessageElement::FindElement(m->Elements,"vz")->CastData<RobotRaconteur::RRArray<double > >());
return ret;
}

RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> ClothState_stub::PackStructure(RR_SHARED_PTR<RobotRaconteur::RRObject> s)
{
RR_SHARED_PTR<ClothState > s2=RobotRaconteur::rr_cast<ClothState >(s);
std::vector<RR_SHARED_PTR<RobotRaconteur::MessageElement> > vret;
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("t",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<double >(s2->t))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("numX",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint16_t >(s2->numX))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("numY",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint16_t >(s2->numY))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("n_points",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint32_t >(s2->n_points))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("x",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(s2->x)));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("y",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(s2->y)));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("z",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(s2->z)));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("fx",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(s2->fx)));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("fy",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(s2->fy)));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("fz",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(s2->fz)));
return RR_MAKE_SHARED<RobotRaconteur::MessageElementStructure>("edu.rpi.cats.utilities.clothsim.ClothState",vret);
}
RR_SHARED_PTR<RobotRaconteur::RRStructure> ClothState_stub::UnpackStructure(RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> m)
{
RR_SHARED_PTR<ClothState > ret=RR_MAKE_SHARED<ClothState >();
ret->t=RobotRaconteur::RRArrayToScalar<double >(RobotRaconteur::MessageElement::FindElement(m->Elements,"t")->CastData<RobotRaconteur::RRArray<double > >());
ret->numX=RobotRaconteur::RRArrayToScalar<uint16_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"numX")->CastData<RobotRaconteur::RRArray<uint16_t > >());
ret->numY=RobotRaconteur::RRArrayToScalar<uint16_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"numY")->CastData<RobotRaconteur::RRArray<uint16_t > >());
ret->n_points=RobotRaconteur::RRArrayToScalar<uint32_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"n_points")->CastData<RobotRaconteur::RRArray<uint32_t > >());
ret->x=RobotRaconteur::MessageElement::FindElement(m->Elements,"x")->CastData<RobotRaconteur::RRArray<double > >();
ret->y=RobotRaconteur::MessageElement::FindElement(m->Elements,"y")->CastData<RobotRaconteur::RRArray<double > >();
ret->z=RobotRaconteur::MessageElement::FindElement(m->Elements,"z")->CastData<RobotRaconteur::RRArray<double > >();
ret->fx=RobotRaconteur::MessageElement::FindElement(m->Elements,"fx")->CastData<RobotRaconteur::RRArray<double > >();
ret->fy=RobotRaconteur::MessageElement::FindElement(m->Elements,"fy")->CastData<RobotRaconteur::RRArray<double > >();
ret->fz=RobotRaconteur::MessageElement::FindElement(m->Elements,"fz")->CastData<RobotRaconteur::RRArray<double > >();
return ret;
}

ClothSimulator_stub::ClothSimulator_stub(const std::string &path, RR_SHARED_PTR<RobotRaconteur::ClientContext> c) : RobotRaconteur::ServiceStub(path,c){ }
void ClothSimulator_stub::RRInitStub()
{
}

RR_SHARED_PTR<ClothState > ClothSimulator_stub::getClothState()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getClothState");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
RR_SHARED_PTR<RobotRaconteur::MessageElement> rr_me=rr_ret->FindElement("return");
return RobotRaconteur::rr_cast<ClothState >(RRGetNode()->UnpackStructure(rr_me->CastData<RobotRaconteur::MessageElementStructure>()));
}

void ClothSimulator_stub::setGraspVelocities(RR_SHARED_PTR<Velocity > v00, RR_SHARED_PTR<Velocity > v10, RR_SHARED_PTR<Velocity > v01, RR_SHARED_PTR<Velocity > v11)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"setGraspVelocities");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("v00",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(v00)))));
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("v10",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(v10)))));
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("v01",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(v01)))));
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("v11",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(v11)))));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
}

void ClothSimulator_stub::DispatchEvent(RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_m)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
void ClothSimulator_stub::DispatchPipeMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
void ClothSimulator_stub::DispatchWireMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
RR_SHARED_PTR<RobotRaconteur::MessageEntry>ClothSimulator_stub::CallbackCall(RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_m)
{
std::string ename=rr_m->MemberName;
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_CallbackCallRet, ename);
rr_mr->ServicePath=rr_m->ServicePath;
rr_mr->TransactionID=rr_m->TransactionID;
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

std::string ClothSimulator_stub::RRType()
{
return "edu.rpi.cats.utilities.clothsim.ClothSimulator";
}
void ClothSimulator_stub::RRClose()
{
ServiceStub::RRClose();
}

void ClothSimulator_stub::async_getClothState(boost::function<void (RR_SHARED_PTR<ClothState >, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getClothState");
AsyncProcessTransaction(rr_req,boost::bind(&ClothSimulator_stub::rrend_getClothState, RobotRaconteur::rr_cast<ClothSimulator_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void ClothSimulator_stub::rrend_getClothState(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<ClothState > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<ClothState >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<ClothState >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
RR_SHARED_PTR<ClothState > rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("return");
rr_ret=RobotRaconteur::rr_cast<ClothState >(RRGetNode()->UnpackStructure(me->CastData<RobotRaconteur::MessageElementStructure>()));
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(RR_SHARED_PTR<ClothState >(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(RR_SHARED_PTR<ClothState >(),RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void ClothSimulator_stub::async_setGraspVelocities(RR_SHARED_PTR<Velocity > v00, RR_SHARED_PTR<Velocity > v10, RR_SHARED_PTR<Velocity > v01, RR_SHARED_PTR<Velocity > v11,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"setGraspVelocities");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("v00",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(v00)))));
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("v10",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(v10)))));
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("v01",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(v01)))));
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("v11",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(v11)))));
AsyncProcessTransaction(rr_req,boost::bind(&ClothSimulator_stub::rrend_setGraspVelocities, RobotRaconteur::rr_cast<ClothSimulator_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void ClothSimulator_stub::rrend_setGraspVelocities(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}

void ClothSimulator_skel::Init(const std::string& path, RR_SHARED_PTR<RobotRaconteur::RRObject> object, RR_SHARED_PTR<RobotRaconteur::ServerContext> context)
{
uncastobj=object;
rr_InitPipeServersRun=false;
rr_InitWireServersRun=false;
ServiceSkel::Init(path,object,context);
}
RR_SHARED_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator > ClothSimulator_skel::get_obj()
{
return RobotRaconteur::rr_cast<edu::rpi::cats::utilities::clothsim::ClothSimulator >(uncastobj);
}
RR_SHARED_PTR<edu::rpi::cats::utilities::clothsim::async_ClothSimulator > ClothSimulator_skel::get_asyncobj()
{
return RR_DYNAMIC_POINTER_CAST<edu::rpi::cats::utilities::clothsim::async_ClothSimulator >(uncastobj);
}
void ClothSimulator_skel::ReleaseCastObject() 
{
}
std::string ClothSimulator_skel::GetObjectType()
{
return "edu.rpi.cats.utilities.clothsim.ClothSimulator";
}
RR_SHARED_PTR<RobotRaconteur::MessageEntry> ClothSimulator_skel::CallGetProperty(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetRes,m->MemberName);
RR_SHARED_PTR<edu::rpi::cats::utilities::clothsim::async_ClothSimulator > async_obj=get_asyncobj();
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> ClothSimulator_skel::CallSetProperty(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetRes,m->MemberName);
RR_SHARED_PTR<edu::rpi::cats::utilities::clothsim::async_ClothSimulator > async_obj=get_asyncobj();
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> ClothSimulator_skel::CallFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_m)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallRes,rr_m->MemberName);
RR_SHARED_PTR<edu::rpi::cats::utilities::clothsim::async_ClothSimulator > async_obj=get_asyncobj();
if (rr_m->MemberName == "getClothState")
{
if (async_obj)
{
RR_WEAK_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel> rr_wp=RobotRaconteur::rr_cast<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel>(shared_from_this());
async_obj->async_getClothState(boost::bind(&edu::rpi::cats::utilities::clothsim::ClothSimulator_skel::rr_getClothState, rr_wp, _1, _2, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
RR_SHARED_PTR<ClothState > rr_return=get_obj()->getClothState();
rr_mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(rr_return)))));
return rr_mr;
}
}
if (rr_m->MemberName == "setGraspVelocities")
{
RR_SHARED_PTR<Velocity > v00 =RobotRaconteur::rr_cast<Velocity >(RRGetNode()->UnpackStructure(rr_m->FindElement("v00")->CastData<RobotRaconteur::MessageElementStructure>()));
RR_SHARED_PTR<Velocity > v10 =RobotRaconteur::rr_cast<Velocity >(RRGetNode()->UnpackStructure(rr_m->FindElement("v10")->CastData<RobotRaconteur::MessageElementStructure>()));
RR_SHARED_PTR<Velocity > v01 =RobotRaconteur::rr_cast<Velocity >(RRGetNode()->UnpackStructure(rr_m->FindElement("v01")->CastData<RobotRaconteur::MessageElementStructure>()));
RR_SHARED_PTR<Velocity > v11 =RobotRaconteur::rr_cast<Velocity >(RRGetNode()->UnpackStructure(rr_m->FindElement("v11")->CastData<RobotRaconteur::MessageElementStructure>()));
if (async_obj)
{
RR_WEAK_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel> rr_wp=RobotRaconteur::rr_cast<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel>(shared_from_this());
async_obj->async_setGraspVelocities(v00, v10, v01, v11, boost::bind(&edu::rpi::cats::utilities::clothsim::ClothSimulator_skel::rr_setGraspVelocities,rr_wp, _1, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->setGraspVelocities(v00, v10, v01, v11);
rr_mr->AddElement("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
return rr_mr;
}
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void ClothSimulator_skel::rr_getClothState(RR_WEAK_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel> skel, RR_SHARED_PTR<ClothState > ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(skel1->RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(ret))));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void ClothSimulator_skel::rr_setGraspVelocities(RR_WEAK_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel> skel, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void ClothSimulator_skel::RegisterEvents(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
RR_SHARED_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator > obj=RobotRaconteur::rr_cast<edu::rpi::cats::utilities::clothsim::ClothSimulator >(rrobj1);
RobotRaconteur::ServiceSkel::RegisterEvents(rrobj1);
}

void ClothSimulator_skel::UnregisterEvents(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
RobotRaconteur::ServiceSkel::UnregisterEvents(rrobj1);
}

RR_SHARED_PTR<RobotRaconteur::RRObject> ClothSimulator_skel::GetSubObj(const std::string &name, const std::string &ind)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void ClothSimulator_skel::InitPipeServers(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
if (rr_InitPipeServersRun) return;
rr_InitPipeServersRun=true;
RR_SHARED_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator > obj=RobotRaconteur::rr_cast<edu::rpi::cats::utilities::clothsim::ClothSimulator >(rrobj1);
}

void ClothSimulator_skel::DispatchPipeMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> ClothSimulator_skel::CallPipeFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void ClothSimulator_skel::InitWireServers(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
if (rr_InitWireServersRun) return;
rr_InitWireServersRun=true;
RR_SHARED_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator > obj=RobotRaconteur::rr_cast<edu::rpi::cats::utilities::clothsim::ClothSimulator >(rrobj1);
}

void ClothSimulator_skel::DispatchWireMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> ClothSimulator_skel::CallWireFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void ClothSimulator_skel::InitCallbackServers(RR_SHARED_PTR<RobotRaconteur::RRObject> o)
{
RR_SHARED_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator > obj=RobotRaconteur::rr_cast<edu::rpi::cats::utilities::clothsim::ClothSimulator >(o);
}
RR_SHARED_PTR<void> ClothSimulator_skel::GetCallbackFunction(uint32_t endpoint, const std::string& membername)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> ClothSimulator_skel::CallMemoryFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::Endpoint> e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
}
}
}
}
}

